// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	conditions "github.com/ditrit/badaas-orm/cli/cmd/gen/conditions"
	mock "github.com/stretchr/testify/mock"
)

// CodeGenerator is an autogenerated mock type for the CodeGenerator type
type CodeGenerator[T interface{}] struct {
	mock.Mock
}

// ForEachField provides a mock function with given fields: file, fields
func (_m *CodeGenerator[T]) ForEachField(file *conditions.File, fields []conditions.Field) []T {
	ret := _m.Called(file, fields)

	var r0 []T
	if rf, ok := ret.Get(0).(func(*conditions.File, []conditions.Field) []T); ok {
		r0 = rf(file, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	return r0
}

// Into provides a mock function with given fields: file
func (_m *CodeGenerator[T]) Into(file *conditions.File) error {
	ret := _m.Called(file)

	var r0 error
	if rf, ok := ret.Get(0).(func(*conditions.File) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCodeGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewCodeGenerator creates a new instance of CodeGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCodeGenerator[T interface{}](t mockConstructorTestingTNewCodeGenerator) *CodeGenerator[T] {
	mock := &CodeGenerator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
