// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var universityType = reflect.TypeOf(*new(models.University))

func (universityConditions universityConditions) IdIs() orm.FieldIs[models.University, model.UUID] {
	return orm.FieldIs[models.University, model.UUID]{FieldID: universityConditions.ID}
}
func (universityConditions universityConditions) CreatedAtIs() orm.FieldIs[models.University, time.Time] {
	return orm.FieldIs[models.University, time.Time]{FieldID: universityConditions.CreatedAt}
}
func (universityConditions universityConditions) UpdatedAtIs() orm.FieldIs[models.University, time.Time] {
	return orm.FieldIs[models.University, time.Time]{FieldID: universityConditions.UpdatedAt}
}
func (universityConditions universityConditions) DeletedAtIs() orm.FieldIs[models.University, time.Time] {
	return orm.FieldIs[models.University, time.Time]{FieldID: universityConditions.DeletedAt}
}
func (universityConditions universityConditions) NameIs() orm.StringFieldIs[models.University] {
	return orm.StringFieldIs[models.University]{FieldIs: orm.FieldIs[models.University, string]{FieldID: universityConditions.Name}}
}

type universityConditions struct {
	ID        query.Field[model.UUID]
	CreatedAt query.Field[time.Time]
	UpdatedAt query.Field[time.Time]
	DeletedAt query.Field[time.Time]
	Name      query.Field[string]
}

var University = universityConditions{
	CreatedAt: query.Field[time.Time]{
		Field:     "CreatedAt",
		ModelType: universityType,
	},
	DeletedAt: query.Field[time.Time]{
		Field:     "DeletedAt",
		ModelType: universityType,
	},
	ID: query.Field[model.UUID]{
		Field:     "ID",
		ModelType: universityType,
	},
	Name: query.Field[string]{
		Field:     "Name",
		ModelType: universityType,
	},
	UpdatedAt: query.Field[time.Time]{
		Field:     "UpdatedAt",
		ModelType: universityType,
	},
}

// Preload allows preloading the University when doing a query
func (universityConditions universityConditions) Preload() condition.Condition[models.University] {
	return condition.NewPreloadCondition[models.University](universityConditions.ID, universityConditions.CreatedAt, universityConditions.UpdatedAt, universityConditions.DeletedAt, universityConditions.Name)
}
