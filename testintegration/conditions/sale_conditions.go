// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/testintegration/models"
	"reflect"
	"time"
)

var saleType = reflect.TypeOf(*new(models.Sale))

func (saleConditions saleConditions) IdIs() orm.FieldIs[models.Sale, model.UUID] {
	return orm.FieldIs[models.Sale, model.UUID]{FieldID: saleConditions.ID}
}
func (saleConditions saleConditions) CreatedAtIs() orm.FieldIs[models.Sale, time.Time] {
	return orm.FieldIs[models.Sale, time.Time]{FieldID: saleConditions.CreatedAt}
}
func (saleConditions saleConditions) UpdatedAtIs() orm.FieldIs[models.Sale, time.Time] {
	return orm.FieldIs[models.Sale, time.Time]{FieldID: saleConditions.UpdatedAt}
}
func (saleConditions saleConditions) DeletedAtIs() orm.FieldIs[models.Sale, time.Time] {
	return orm.FieldIs[models.Sale, time.Time]{FieldID: saleConditions.DeletedAt}
}
func (saleConditions saleConditions) CodeIs() orm.FieldIs[models.Sale, int] {
	return orm.FieldIs[models.Sale, int]{FieldID: saleConditions.Code}
}
func (saleConditions saleConditions) DescriptionIs() orm.StringFieldIs[models.Sale] {
	return orm.StringFieldIs[models.Sale]{FieldIs: orm.FieldIs[models.Sale, string]{FieldID: saleConditions.Description}}
}
func (saleConditions saleConditions) Product(conditions ...condition.Condition[models.Product]) condition.JoinCondition[models.Sale] {
	return condition.NewJoinCondition[models.Sale, models.Product](conditions, "Product", "ProductID", saleConditions.Preload(), "ID")
}
func (saleConditions saleConditions) PreloadProduct() condition.JoinCondition[models.Sale] {
	return saleConditions.Product(Product.Preload())
}
func (saleConditions saleConditions) ProductIdIs() orm.FieldIs[models.Sale, model.UUID] {
	return orm.FieldIs[models.Sale, model.UUID]{FieldID: saleConditions.ProductID}
}
func (saleConditions saleConditions) Seller(conditions ...condition.Condition[models.Seller]) condition.JoinCondition[models.Sale] {
	return condition.NewJoinCondition[models.Sale, models.Seller](conditions, "Seller", "SellerID", saleConditions.Preload(), "ID")
}
func (saleConditions saleConditions) PreloadSeller() condition.JoinCondition[models.Sale] {
	return saleConditions.Seller(Seller.Preload())
}
func (saleConditions saleConditions) SellerIdIs() orm.FieldIs[models.Sale, model.UUID] {
	return orm.FieldIs[models.Sale, model.UUID]{FieldID: saleConditions.SellerID}
}

type saleConditions struct {
	ID          query.Field[model.UUID]
	CreatedAt   query.Field[time.Time]
	UpdatedAt   query.Field[time.Time]
	DeletedAt   query.Field[time.Time]
	Code        query.Field[int]
	Description query.Field[string]
	ProductID   query.Field[model.UUID]
	SellerID    query.Field[model.UUID]
}

var Sale = saleConditions{
	Code: query.Field[int]{
		Field:     "Code",
		ModelType: saleType,
	},
	CreatedAt: query.Field[time.Time]{
		Field:     "CreatedAt",
		ModelType: saleType,
	},
	DeletedAt: query.Field[time.Time]{
		Field:     "DeletedAt",
		ModelType: saleType,
	},
	Description: query.Field[string]{
		Field:     "Description",
		ModelType: saleType,
	},
	ID: query.Field[model.UUID]{
		Field:     "ID",
		ModelType: saleType,
	},
	ProductID: query.Field[model.UUID]{
		Field:     "ProductID",
		ModelType: saleType,
	},
	SellerID: query.Field[model.UUID]{
		Field:     "SellerID",
		ModelType: saleType,
	},
	UpdatedAt: query.Field[time.Time]{
		Field:     "UpdatedAt",
		ModelType: saleType,
	},
}

// Preload allows preloading the Sale when doing a query
func (saleConditions saleConditions) Preload() condition.Condition[models.Sale] {
	return condition.NewPreloadCondition[models.Sale](saleConditions.ID, saleConditions.CreatedAt, saleConditions.UpdatedAt, saleConditions.DeletedAt, saleConditions.Code, saleConditions.Description, saleConditions.ProductID, saleConditions.SellerID)
}

// PreloadRelations allows preloading all the Sale's relation when doing a query
func (saleConditions saleConditions) PreloadRelations() []condition.Condition[models.Sale] {
	return []condition.Condition[models.Sale]{saleConditions.PreloadProduct(), saleConditions.PreloadSeller()}
}

func (saleConditions saleConditions) CodeSet() query.FieldSet[models.Sale, int] {
	return query.FieldSet[models.Sale, int]{FieldID: saleConditions.Code}
}
