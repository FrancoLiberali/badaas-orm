// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	orm "github.com/ditrit/badaas/orm"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	query "github.com/ditrit/badaas/orm/query"
	models "github.com/ditrit/badaas/persistence/models"
	"reflect"
	"time"
)

var userType = reflect.TypeOf(*new(models.User))

func (userConditions userConditions) IdIs() orm.FieldIs[models.User, model.UUID] {
	return orm.FieldIs[models.User, model.UUID]{FieldID: userConditions.ID}
}
func (userConditions userConditions) CreatedAtIs() orm.FieldIs[models.User, time.Time] {
	return orm.FieldIs[models.User, time.Time]{FieldID: userConditions.CreatedAt}
}
func (userConditions userConditions) UpdatedAtIs() orm.FieldIs[models.User, time.Time] {
	return orm.FieldIs[models.User, time.Time]{FieldID: userConditions.UpdatedAt}
}
func (userConditions userConditions) DeletedAtIs() orm.FieldIs[models.User, time.Time] {
	return orm.FieldIs[models.User, time.Time]{FieldID: userConditions.DeletedAt}
}
func (userConditions userConditions) UsernameIs() orm.StringFieldIs[models.User] {
	return orm.StringFieldIs[models.User]{FieldIs: orm.FieldIs[models.User, string]{FieldID: userConditions.Username}}
}
func (userConditions userConditions) EmailIs() orm.StringFieldIs[models.User] {
	return orm.StringFieldIs[models.User]{FieldIs: orm.FieldIs[models.User, string]{FieldID: userConditions.Email}}
}
func (userConditions userConditions) PasswordIs() orm.FieldIs[models.User, []uint8] {
	return orm.FieldIs[models.User, []uint8]{FieldID: userConditions.Password}
}

type userConditions struct {
	ID        query.Field[model.UUID]
	CreatedAt query.Field[time.Time]
	UpdatedAt query.Field[time.Time]
	DeletedAt query.Field[time.Time]
	Username  query.Field[string]
	Email     query.Field[string]
	Password  query.Field[[]uint8]
}

var User = userConditions{
	CreatedAt: query.Field[time.Time]{
		Field:     "CreatedAt",
		ModelType: userType,
	},
	DeletedAt: query.Field[time.Time]{
		Field:     "DeletedAt",
		ModelType: userType,
	},
	Email: query.Field[string]{
		Field:     "Email",
		ModelType: userType,
	},
	ID: query.Field[model.UUID]{
		Field:     "ID",
		ModelType: userType,
	},
	Password: query.Field[[]uint8]{
		Field:     "Password",
		ModelType: userType,
	},
	UpdatedAt: query.Field[time.Time]{
		Field:     "UpdatedAt",
		ModelType: userType,
	},
	Username: query.Field[string]{
		Field:     "Username",
		ModelType: userType,
	},
}

func (userConditions userConditions) Preload() condition.Condition[models.User] {
	return condition.NewPreloadCondition[models.User](userConditions.ID, userConditions.CreatedAt, userConditions.UpdatedAt, userConditions.DeletedAt, userConditions.Username, userConditions.Email, userConditions.Password)
}
