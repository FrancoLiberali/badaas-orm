// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	basicslicespointer "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/basicslicespointer"
	cql "github.com/ditrit/badaas/orm/cql"
	model "github.com/ditrit/badaas/orm/model"
	"time"
)

type basicSlicesPointerConditions struct {
	ID         cql.Field[basicslicespointer.BasicSlicesPointer, model.UUID]
	CreatedAt  cql.Field[basicslicespointer.BasicSlicesPointer, time.Time]
	UpdatedAt  cql.Field[basicslicespointer.BasicSlicesPointer, time.Time]
	DeletedAt  cql.Field[basicslicespointer.BasicSlicesPointer, time.Time]
	Bool       cql.Field[basicslicespointer.BasicSlicesPointer, []bool]
	Int        cql.Field[basicslicespointer.BasicSlicesPointer, []int]
	Int8       cql.Field[basicslicespointer.BasicSlicesPointer, []int8]
	Int16      cql.Field[basicslicespointer.BasicSlicesPointer, []int16]
	Int32      cql.Field[basicslicespointer.BasicSlicesPointer, []int32]
	Int64      cql.Field[basicslicespointer.BasicSlicesPointer, []int64]
	UInt       cql.Field[basicslicespointer.BasicSlicesPointer, []uint]
	UInt8      cql.Field[basicslicespointer.BasicSlicesPointer, []uint8]
	UInt16     cql.Field[basicslicespointer.BasicSlicesPointer, []uint16]
	UInt32     cql.Field[basicslicespointer.BasicSlicesPointer, []uint32]
	UInt64     cql.Field[basicslicespointer.BasicSlicesPointer, []uint64]
	UIntptr    cql.Field[basicslicespointer.BasicSlicesPointer, []uintptr]
	Float32    cql.Field[basicslicespointer.BasicSlicesPointer, []float32]
	Float64    cql.Field[basicslicespointer.BasicSlicesPointer, []float64]
	Complex64  cql.Field[basicslicespointer.BasicSlicesPointer, []complex64]
	Complex128 cql.Field[basicslicespointer.BasicSlicesPointer, []complex128]
	String     cql.Field[basicslicespointer.BasicSlicesPointer, []string]
	Byte       cql.Field[basicslicespointer.BasicSlicesPointer, []uint8]
}

var BasicSlicesPointer = basicSlicesPointerConditions{
	Bool:       cql.Field[basicslicespointer.BasicSlicesPointer, []bool]{Name: "Bool"},
	Byte:       cql.Field[basicslicespointer.BasicSlicesPointer, []uint8]{Name: "Byte"},
	Complex128: cql.Field[basicslicespointer.BasicSlicesPointer, []complex128]{Name: "Complex128"},
	Complex64:  cql.Field[basicslicespointer.BasicSlicesPointer, []complex64]{Name: "Complex64"},
	CreatedAt:  cql.Field[basicslicespointer.BasicSlicesPointer, time.Time]{Name: "CreatedAt"},
	DeletedAt:  cql.Field[basicslicespointer.BasicSlicesPointer, time.Time]{Name: "DeletedAt"},
	Float32:    cql.Field[basicslicespointer.BasicSlicesPointer, []float32]{Name: "Float32"},
	Float64:    cql.Field[basicslicespointer.BasicSlicesPointer, []float64]{Name: "Float64"},
	ID:         cql.Field[basicslicespointer.BasicSlicesPointer, model.UUID]{Name: "ID"},
	Int:        cql.Field[basicslicespointer.BasicSlicesPointer, []int]{Name: "Int"},
	Int16:      cql.Field[basicslicespointer.BasicSlicesPointer, []int16]{Name: "Int16"},
	Int32:      cql.Field[basicslicespointer.BasicSlicesPointer, []int32]{Name: "Int32"},
	Int64:      cql.Field[basicslicespointer.BasicSlicesPointer, []int64]{Name: "Int64"},
	Int8:       cql.Field[basicslicespointer.BasicSlicesPointer, []int8]{Name: "Int8"},
	String:     cql.Field[basicslicespointer.BasicSlicesPointer, []string]{Name: "String"},
	UInt:       cql.Field[basicslicespointer.BasicSlicesPointer, []uint]{Name: "UInt"},
	UInt16:     cql.Field[basicslicespointer.BasicSlicesPointer, []uint16]{Name: "UInt16"},
	UInt32:     cql.Field[basicslicespointer.BasicSlicesPointer, []uint32]{Name: "UInt32"},
	UInt64:     cql.Field[basicslicespointer.BasicSlicesPointer, []uint64]{Name: "UInt64"},
	UInt8:      cql.Field[basicslicespointer.BasicSlicesPointer, []uint8]{Name: "UInt8"},
	UIntptr:    cql.Field[basicslicespointer.BasicSlicesPointer, []uintptr]{Name: "UIntptr"},
	UpdatedAt:  cql.Field[basicslicespointer.BasicSlicesPointer, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the BasicSlicesPointer when doing a query
func (basicSlicesPointerConditions basicSlicesPointerConditions) Preload() cql.Condition[basicslicespointer.BasicSlicesPointer] {
	return cql.NewPreloadCondition[basicslicespointer.BasicSlicesPointer](basicSlicesPointerConditions.ID, basicSlicesPointerConditions.CreatedAt, basicSlicesPointerConditions.UpdatedAt, basicSlicesPointerConditions.DeletedAt, basicSlicesPointerConditions.Bool, basicSlicesPointerConditions.Int, basicSlicesPointerConditions.Int8, basicSlicesPointerConditions.Int16, basicSlicesPointerConditions.Int32, basicSlicesPointerConditions.Int64, basicSlicesPointerConditions.UInt, basicSlicesPointerConditions.UInt8, basicSlicesPointerConditions.UInt16, basicSlicesPointerConditions.UInt32, basicSlicesPointerConditions.UInt64, basicSlicesPointerConditions.UIntptr, basicSlicesPointerConditions.Float32, basicSlicesPointerConditions.Float64, basicSlicesPointerConditions.Complex64, basicSlicesPointerConditions.Complex128, basicSlicesPointerConditions.String, basicSlicesPointerConditions.Byte)
}
