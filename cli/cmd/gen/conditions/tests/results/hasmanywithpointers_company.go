// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	hasmanywithpointers "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/hasmanywithpointers"
	cql "github.com/ditrit/badaas/orm/cql"
	model "github.com/ditrit/badaas/orm/model"
	"time"
)

func (companyWithPointersConditions companyWithPointersConditions) PreloadSellers(nestedPreloads ...cql.JoinCondition[hasmanywithpointers.SellerInPointers]) cql.Condition[hasmanywithpointers.CompanyWithPointers] {
	return cql.NewCollectionPreloadCondition[hasmanywithpointers.CompanyWithPointers, hasmanywithpointers.SellerInPointers]("Sellers", nestedPreloads)
}

type companyWithPointersConditions struct {
	ID        cql.Field[hasmanywithpointers.CompanyWithPointers, model.UUID]
	CreatedAt cql.Field[hasmanywithpointers.CompanyWithPointers, time.Time]
	UpdatedAt cql.Field[hasmanywithpointers.CompanyWithPointers, time.Time]
	DeletedAt cql.Field[hasmanywithpointers.CompanyWithPointers, time.Time]
}

var CompanyWithPointers = companyWithPointersConditions{
	CreatedAt: cql.Field[hasmanywithpointers.CompanyWithPointers, time.Time]{Name: "CreatedAt"},
	DeletedAt: cql.Field[hasmanywithpointers.CompanyWithPointers, time.Time]{Name: "DeletedAt"},
	ID:        cql.Field[hasmanywithpointers.CompanyWithPointers, model.UUID]{Name: "ID"},
	UpdatedAt: cql.Field[hasmanywithpointers.CompanyWithPointers, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the CompanyWithPointers when doing a query
func (companyWithPointersConditions companyWithPointersConditions) Preload() cql.Condition[hasmanywithpointers.CompanyWithPointers] {
	return cql.NewPreloadCondition[hasmanywithpointers.CompanyWithPointers](companyWithPointersConditions.ID, companyWithPointersConditions.CreatedAt, companyWithPointersConditions.UpdatedAt, companyWithPointersConditions.DeletedAt)
}

// PreloadRelations allows preloading all the CompanyWithPointers's relation when doing a query
func (companyWithPointersConditions companyWithPointersConditions) PreloadRelations() []cql.Condition[hasmanywithpointers.CompanyWithPointers] {
	return []cql.Condition[hasmanywithpointers.CompanyWithPointers]{companyWithPointersConditions.PreloadSellers()}
}
