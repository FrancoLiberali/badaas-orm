// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	basicpointers "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/basicpointers"
	cql "github.com/ditrit/badaas/orm/cql"
	model "github.com/ditrit/badaas/orm/model"
	"time"
)

type basicPointersConditions struct {
	ID         cql.Field[basicpointers.BasicPointers, model.UUID]
	CreatedAt  cql.Field[basicpointers.BasicPointers, time.Time]
	UpdatedAt  cql.Field[basicpointers.BasicPointers, time.Time]
	DeletedAt  cql.Field[basicpointers.BasicPointers, time.Time]
	Bool       cql.BoolField[basicpointers.BasicPointers]
	Int        cql.Field[basicpointers.BasicPointers, int]
	Int8       cql.Field[basicpointers.BasicPointers, int8]
	Int16      cql.Field[basicpointers.BasicPointers, int16]
	Int32      cql.Field[basicpointers.BasicPointers, int32]
	Int64      cql.Field[basicpointers.BasicPointers, int64]
	UInt       cql.Field[basicpointers.BasicPointers, uint]
	UInt8      cql.Field[basicpointers.BasicPointers, uint8]
	UInt16     cql.Field[basicpointers.BasicPointers, uint16]
	UInt32     cql.Field[basicpointers.BasicPointers, uint32]
	UInt64     cql.Field[basicpointers.BasicPointers, uint64]
	UIntptr    cql.Field[basicpointers.BasicPointers, uintptr]
	Float32    cql.Field[basicpointers.BasicPointers, float32]
	Float64    cql.Field[basicpointers.BasicPointers, float64]
	Complex64  cql.Field[basicpointers.BasicPointers, complex64]
	Complex128 cql.Field[basicpointers.BasicPointers, complex128]
	String     cql.StringField[basicpointers.BasicPointers]
	Byte       cql.Field[basicpointers.BasicPointers, uint8]
}

var BasicPointers = basicPointersConditions{
	Bool:       cql.BoolField[basicpointers.BasicPointers]{Field: cql.Field[basicpointers.BasicPointers, bool]{Name: "Bool"}},
	Byte:       cql.Field[basicpointers.BasicPointers, uint8]{Name: "Byte"},
	Complex128: cql.Field[basicpointers.BasicPointers, complex128]{Name: "Complex128"},
	Complex64:  cql.Field[basicpointers.BasicPointers, complex64]{Name: "Complex64"},
	CreatedAt:  cql.Field[basicpointers.BasicPointers, time.Time]{Name: "CreatedAt"},
	DeletedAt:  cql.Field[basicpointers.BasicPointers, time.Time]{Name: "DeletedAt"},
	Float32:    cql.Field[basicpointers.BasicPointers, float32]{Name: "Float32"},
	Float64:    cql.Field[basicpointers.BasicPointers, float64]{Name: "Float64"},
	ID:         cql.Field[basicpointers.BasicPointers, model.UUID]{Name: "ID"},
	Int:        cql.Field[basicpointers.BasicPointers, int]{Name: "Int"},
	Int16:      cql.Field[basicpointers.BasicPointers, int16]{Name: "Int16"},
	Int32:      cql.Field[basicpointers.BasicPointers, int32]{Name: "Int32"},
	Int64:      cql.Field[basicpointers.BasicPointers, int64]{Name: "Int64"},
	Int8:       cql.Field[basicpointers.BasicPointers, int8]{Name: "Int8"},
	String:     cql.StringField[basicpointers.BasicPointers]{Field: cql.Field[basicpointers.BasicPointers, string]{Name: "String"}},
	UInt:       cql.Field[basicpointers.BasicPointers, uint]{Name: "UInt"},
	UInt16:     cql.Field[basicpointers.BasicPointers, uint16]{Name: "UInt16"},
	UInt32:     cql.Field[basicpointers.BasicPointers, uint32]{Name: "UInt32"},
	UInt64:     cql.Field[basicpointers.BasicPointers, uint64]{Name: "UInt64"},
	UInt8:      cql.Field[basicpointers.BasicPointers, uint8]{Name: "UInt8"},
	UIntptr:    cql.Field[basicpointers.BasicPointers, uintptr]{Name: "UIntptr"},
	UpdatedAt:  cql.Field[basicpointers.BasicPointers, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the BasicPointers when doing a query
func (basicPointersConditions basicPointersConditions) Preload() cql.Condition[basicpointers.BasicPointers] {
	return cql.NewPreloadCondition[basicpointers.BasicPointers](basicPointersConditions.ID, basicPointersConditions.CreatedAt, basicPointersConditions.UpdatedAt, basicPointersConditions.DeletedAt, basicPointersConditions.Bool, basicPointersConditions.Int, basicPointersConditions.Int8, basicPointersConditions.Int16, basicPointersConditions.Int32, basicPointersConditions.Int64, basicPointersConditions.UInt, basicPointersConditions.UInt8, basicPointersConditions.UInt16, basicPointersConditions.UInt32, basicPointersConditions.UInt64, basicPointersConditions.UIntptr, basicPointersConditions.Float32, basicPointersConditions.Float64, basicPointersConditions.Complex64, basicPointersConditions.Complex128, basicPointersConditions.String, basicPointersConditions.Byte)
}
