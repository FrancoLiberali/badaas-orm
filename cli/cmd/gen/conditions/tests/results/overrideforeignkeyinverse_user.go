// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	overrideforeignkeyinverse "github.com/ditrit/badaas-cli/cmd/gen/conditions/tests/overrideforeignkeyinverse"
	cql "github.com/ditrit/badaas/orm/cql"
	model "github.com/ditrit/badaas/orm/model"
	"time"
)

func (userConditions userConditions) CreditCard(conditions ...cql.Condition[overrideforeignkeyinverse.CreditCard]) cql.JoinCondition[overrideforeignkeyinverse.User] {
	return cql.NewJoinCondition[overrideforeignkeyinverse.User, overrideforeignkeyinverse.CreditCard](conditions, "CreditCard", "ID", userConditions.Preload(), "UserReference")
}
func (userConditions userConditions) PreloadCreditCard() cql.JoinCondition[overrideforeignkeyinverse.User] {
	return userConditions.CreditCard(CreditCard.Preload())
}

type userConditions struct {
	ID        cql.Field[overrideforeignkeyinverse.User, model.UUID]
	CreatedAt cql.Field[overrideforeignkeyinverse.User, time.Time]
	UpdatedAt cql.Field[overrideforeignkeyinverse.User, time.Time]
	DeletedAt cql.Field[overrideforeignkeyinverse.User, time.Time]
}

var User = userConditions{
	CreatedAt: cql.Field[overrideforeignkeyinverse.User, time.Time]{Name: "CreatedAt"},
	DeletedAt: cql.Field[overrideforeignkeyinverse.User, time.Time]{Name: "DeletedAt"},
	ID:        cql.Field[overrideforeignkeyinverse.User, model.UUID]{Name: "ID"},
	UpdatedAt: cql.Field[overrideforeignkeyinverse.User, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the User when doing a query
func (userConditions userConditions) Preload() cql.Condition[overrideforeignkeyinverse.User] {
	return cql.NewPreloadCondition[overrideforeignkeyinverse.User](userConditions.ID, userConditions.CreatedAt, userConditions.UpdatedAt, userConditions.DeletedAt)
}

// PreloadRelations allows preloading all the User's relation when doing a query
func (userConditions userConditions) PreloadRelations() []cql.Condition[overrideforeignkeyinverse.User] {
	return []cql.Condition[overrideforeignkeyinverse.User]{userConditions.PreloadCreditCard()}
}
